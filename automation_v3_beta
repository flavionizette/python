from hmac import new
import os
import getpass
import keyboard
import time
import pyautogui
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoSuchElementException

# Configurações do WebDriver
options = webdriver.FirefoxOptions()
options.add_argument("--start-maximized")
download_dir =  "C:/Users/3701097/Sotreq/Marcus Barbosa - Projeto Inspetor/Relatórios 2024"
options.set_preference("browser.download.dir", download_dir)
options.set_preference("browser.download.folderList", 2)
options.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/pdf") 
options.set_preference("pdfjs.disabled", True)
options.set_preference("browser.download.userDownloadDir", True)
options.set_preference("browser.download.manager.showWhenStarting", False)
options.set_preference("browser.helperApps.showProgressDialog", False)

firefox_driver_path = 'C:\webdriver\geckodriver.exe'

# Inicialização do WebDriver
driver = webdriver.Firefox(options=options)

# Definindo um tempo máximo de espera de 10 segundos
wait = WebDriverWait(driver, 10)
wait.until(EC.visibility_of_element_located((By.TAG_NAME, "body")))

# URL do site
url = 'http://sotreqlnkinterno.sotreq.com.br/'
driver.get(url)



# Solicitação das credenciais do usuário
username = input("Digite sua matrícula: ")
password = getpass.getpass("Digite sua senha, a mesma utilizada no Windows: ")

# Preenchendo o campo de matrícula
username_field = wait.until(EC.presence_of_element_located((By.ID, "username")))
username_field.send_keys(username)

# Preenchendo o campo de senha
password_field = wait.until(EC.presence_of_element_located((By.ID, "password")))
password_field.send_keys(password)

# Pressionando Enter para enviar o formulário de login
password_field.send_keys(Keys.RETURN)

# Acessando o menu "Gestão de Serviço"
gestao_servico_menu = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[contains(text(),'Gestão de Campo')]")))
gestao_servico_menu.click()


# Acessando o dropdown menu "Painel de Ordens de Serviço"
painel_ordens_servicos = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[contains(text(),'Painel de Ordens de Serviço')]")))
painel_ordens_servicos.click()

# Atraso para carregamento
wait.until(EC.presence_of_element_located((By.ID, "detachedInspectionsTab")))

# Acessando o menu "Inspeções sem OS"
inspecoes_sem_os = wait.until(EC.element_to_be_clickable((By.ID, "detachedInspectionsTab")))
inspecoes_sem_os.click()

time.sleep(1)
# -------------------------------------------------------------------------------------------------------------------------------------------------

# Aguardando a página carregar completamente após clicar no menu "Inspeções sem OS"
wait.until(EC.presence_of_element_located((By.ID, "detachedInspectionsTab")))

# Digitar nome do inspetor desejado
nome_inspetor = input("Digite o nome do inspetor: ")

# Clicar no campo o Nome do Inspetor
driver.find_element(By.XPATH, "//div[@id='detachedInspectionsTable-filterDiv']/div[9]/span/span/span")

time.sleep(1)

inspetor_dropdown = wait.until(EC.element_to_be_clickable((By.XPATH, "//div[@id='detachedInspectionsTable-filterDiv']/div[9]/span/span/span")))
inspetor_dropdown.click()

time.sleep(2)

# Preencher com o nome do inspetor digitado
campo_inspetor = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='search']")))
campo_inspetor.send_keys(nome_inspetor)
time.sleep(3)
campo_inspetor.send_keys(Keys.RETURN)

# Set data no campo Período
data_atual = datetime.now()
data_semana_atras = data_atual - timedelta(days=14)

# Converter as datas para o formato desejado (por exemplo, 'dd/mm/aaaa')
data_atual_formatada = data_atual.strftime('%d/%m/%Y')
data_semana_atras_formatada = data_semana_atras.strftime('%d/%m/%Y')

# Preencher campo Até
setdata = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@id='dataCriacaoFim']")))
setdata.send_keys(data_atual_formatada)

# Preencher campo De
setdata_atras = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@id='dataCriacaoInicio']")))
setdata_atras.send_keys(data_semana_atras_formatada)

# Clicar no botão Buscar
botao_procura = wait.until(EC.element_to_be_clickable((By.XPATH, "(//button[@type='button'])[17]")))
botao_procura.click()

time.sleep(5)

# Rolagem vertical
last_height = driver.execute_script("return document.body.scrollHeight")
while True:
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height
    time.sleep(5)
  
# -------------------------------------------------------------------------------------------------------------------------------------------------

def baixar_arquivos(driver, sequencia_de_css_seletores):
    for i, css_selector in enumerate(sequencia_de_css_seletores, start=1):
        # Clica no elemento
        elemento = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.CSS_SELECTOR, css_selector)))
        elemento.click()
        print(f"Baixando arquivo {i} da sequência...")
        time.sleep(65)
        # Verifica se atingiu o décimo elemento da sequência
        if i == 10:
            try:
                # Verifica se há uma próxima página
                n = 2
                proxima_pagina = WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, f"//a[contains(text(),'{n}')]")))
                proxima_pagina.click()
                time.sleep(45)
                print("Indo para próxima página...")
                n += 1
            except TimeoutException:
                print("Não há próxima página para download. Automação finalizada.")
                break


sequencia_de_css_seletores = [
    f"tr:nth-child({n}) .ion-clipboard" for n in range(1, 11)
]

# Chama a função para baixar os arquivos em sequência com paginação
while True:
        baixar_arquivos(driver, sequencia_de_css_seletores)

        if False:
            print("Download concluido, se necessário realizar nova execução")
            break
time.sleep(30)

# Fechar o navegador
driver.quit()
